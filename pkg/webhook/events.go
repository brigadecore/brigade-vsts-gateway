package webhook

import (
	"encoding/json"
	"io"
	"time"
)

// VSTSEvent models an event generated by VSTS
type VSTSEvent struct {
	ID          string `json:"id"`
	EventType   string `json:"eventType"`
	PublisherID string `json:"publisherId"`
	Scope       string `json:"scope"`
	Message     struct {
		Text     string `json:"text"`
		HTML     string `json:"html"`
		Markdown string `json:"markdown"`
	} `json:"message"`
	DetailedMessage struct {
		Text     string `json:"text"`
		HTML     string `json:"html"`
		Markdown string `json:"markdown"`
	} `json:"detailedMessage"`

	Resource        interface{} `json:"resource"`
	ResourceVersion string      `json:"resourceVersion"`

	ResourceContainers struct {
		Collection struct {
			ID string `json:"id"`
		} `json:"collection"`
		Account struct {
			ID string `json:"id"`
		} `json:"account"`
		Project struct {
			ID string `json:"id"`
		} `json:"project"`
	} `json:"resourceContainers"`

	CreatedDate time.Time `json:"createdDate"`
}

// NewFromRequestBody decodes the body of an HTTP request and returns the event
func NewFromRequestBody(body io.Reader) (*VSTSEvent, error) {
	event := new(VSTSEvent)

	decoder := json.NewDecoder(body)
	err := decoder.Decode(&event)
	return event, err
}

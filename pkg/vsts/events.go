package vsts

import (
	"encoding/json"
	"io"
	"time"
)

// Event models an event generated by VSTS
type Event struct {
	ID          string `json:"id"`
	EventType   string `json:"eventType"`
	PublisherID string `json:"publisherId"`
	Scope       string `json:"scope"`
	Message     struct {
		Text     string `json:"text"`
		HTML     string `json:"html"`
		Markdown string `json:"markdown"`
	} `json:"message"`
	DetailedMessage struct {
		Text     string `json:"text"`
		HTML     string `json:"html"`
		Markdown string `json:"markdown"`
	} `json:"detailedMessage"`

	// Resource        interface{} `json:"resource"`
	Resource        struct {
		Commits interface{} `json:"commits"`
		RefUpdates []struct {
			Name string `json:"name"`
			OldObjectId string `json:"oldObjectId"`
			NewObjectId string `json:"newObjectId"`
		} `json:"refUpdates"`
		Repository interface{} `json:"repository"`
		DefaultBranch string `json:"defaultBranch"`
		RemoteUrl string `json:"remoteUrl"`
	} `json:"resource"`
	ResourceVersion string      `json:"resourceVersion"`

	ResourceContainers struct {
		Collection struct {
			ID string `json:"id"`
		} `json:"collection"`
		Account struct {
			ID string `json:"id"`
		} `json:"account"`
		Project struct {
			ID string `json:"id"`
		} `json:"project"`
	} `json:"resourceContainers"`

	CreatedDate time.Time `json:"createdDate"`
}

// NewFromRequestBody decodes the body of an HTTP request and returns the event
func NewFromRequestBody(body io.Reader) (*Event, error) {
	event := new(Event)

	decoder := json.NewDecoder(body)
	err := decoder.Decode(&event)
	return event, err
}
